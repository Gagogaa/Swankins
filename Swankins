#!/usr/bin/env python3

import argparse
import logging
import os
import sys

from SwankinsStorage import Storage, TweetRecord
from Markov import Markov

# Create the module to read in files!
# Redo the README.md


def log_level(level):
    level = level.upper()
    if level == 'DEBUG':
        return logging.DEBUG
    elif level == 'INFO':
        return logging.INFO
    elif level == 'WARNING':
        return logging.WARNING
    elif level == 'ERROR':
        return logging.ERROR
    elif level == 'CRITICAL':
        return logging.CRITICAL
    else:
        raise argparse.ArgumentTypeError(f'{level} is not a log level')


def log_file(filename):
    if filename == 'None':
        return None
    elif os.path.isfile(filename) and not os.access(filename, os.W_OK):
        raise argparse.ArgumentTypeError(f'''{filename} exists and is
        not writeable''')
    else:
        return filename


parser = argparse.ArgumentParser(
    prog='Swankins',
    description='''Meet Swankins, the markov chain twitter bot! ü§ñ''',
    usage='''Swankins --debug -S books/*''',
)

parser.add_argument('-S', '--sources',
                    help='list of files Swankins reads',
                    default=(),
                    nargs='+',
                    metavar=('book.txt'))

parser.add_argument('-r', '--recursive',
                    help='''If a directory is specified with -S recursively
                    search through the files''',
                    action="store_true")

parser.add_argument('-F', '--frequency',
                    help='delay between saying quotes in seconds',
                    type=int,
                    default=86400,
                    metavar='60')

parser.add_argument('-DB', '--data-base-file',
                    help='the file to use as the sqlite3 database',
                    # type=open,
                    # https://docs.python.org/3/library/argparse.html?highlight=argparse#type
                    # Check the link out!
                    default=':memory:',
                    metavar=('knowledge-base.db'))

parser.add_argument("--debug",
                    help='only echo to console don\'t output to Twitter',
                    default=False,
                    action="store_true")

parser.add_argument('-ll',
                    help='log level: Debug, Info, Warning, Error, Critical',
                    type=log_level,
                    default='Info',
                    metavar='Info')

parser.add_argument('-lf', '--log-file',
                    help='''the log file, if you pass in "None", without the
                    quotes, the logger will display to stdout instead''',
                    type=log_file,
                    default='swankin\'s.log',
                    metavar='swankin\'s.log')

twitter_keys_parser = parser.add_argument_group(
    title='Twitter Keys',
    description='''The auth keys from Twitter. These are REQUIRED unless your
                   running in debug mode''')

twitter_keys_parser.add_argument('--app-key',
                                 default=None)

twitter_keys_parser.add_argument('--app-secret',
                                 default=None)

twitter_keys_parser.add_argument('--oauth-token',
                                 default=None)

twitter_keys_parser.add_argument('--oauth-token-secret',
                                 default=None)

args = parser.parse_args()

# TODO redo work on the logging format
# logging.basicConfig(format='%(levelname)s:%(message)s', level=ll)
logging.basicConfig(filename=args.log_file, level=args.ll)

if args.debug:
    logging.info("Starting in debug mode! üêõ")
else:
    if args.app_key is None or \
       args.app_secret is None or \
       args.oauth_token is None or \
       args.oauth_token is None:
        parser.print_help()
        exit()

# TODO work on the sending the tweets!
# TODO think about making a TOML log file insted of the command line stuff

# TODO maybe move this upwards?
if __name__ == '__main__':
    try:
        with Storage(filename=args.data_base_file) as storage:
            markov = Markov(storage=storage, sources=args.sources)
            for message in markov.messages():
                storage.store(TweetRecord(status=message))
                # output.post(message)
                logging.info(f'Quote [{message}]')
                print(message)

    except KeyboardInterrupt:
        logging.info('Shutting down üîΩ')
        print('\nShutting down üîΩ')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)
